// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  username       String       @unique @db.VarChar(50)
  password       String       @db.VarChar(50)
  nickname       String       @db.VarChar(50)
  email          String       @db.VarChar(50)
  avatar         String       @default("") @db.VarChar(255)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  friends        FriendShip[] @relation("userToFriend")
  inverseFriends FriendShip[] @relation("friendToUser")
}

// user 与 user 的多对多关系(自身的多对多关系)
model FriendShip {
  user   User @relation("userToFriend", fields: [userId], references: [id])
  userId Int

  friend   User @relation("friendToUser", fields: [friendId], references: [id])
  friendId Int

  @@id([userId, friendId])
}

enum FriendRequestStatus {
  Pending
  Accepted
  Rejected
}

model FriendRequest {
  id         Int                 @id @default(autoincrement())
  // 请求发送方
  fromUserId Int
  // 待添加好友
  toUserId   Int
  // 添加好友的原因
  reason     String              @default("") @db.VarChar(255)
  status     FriendRequestStatus @default(Pending)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}
